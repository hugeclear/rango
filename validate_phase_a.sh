#!/bin/bash
# Phase A validation script

set -euo pipefail

OUT="results/bench/strict_try_alpha6"

echo "üîç Phase A Validation Results"
echo "============================="

if [[ ! -f "$OUT/predictions.jsonl" ]]; then
    echo "‚ùå Predictions file not found: $OUT/predictions.jsonl"
    exit 1
fi

echo ""
echo "üìä EDITING EFFECTS ANALYSIS"
echo "---------------------------"
python tools/detect_editing_effects.py "$OUT/predictions.jsonl" --verbose | head -20

echo ""
echo "üîí STRICT COMPLIANCE CHECK" 
echo "-------------------------"
python tools/validate_strict_results.py "$OUT/predictions.jsonl" | head -15

echo ""
echo "üö™ GATE HEALTH DIAGNOSIS"
echo "-----------------------"
python tools/diagnose_gate_health.py "$OUT/predictions.jsonl" | head -15

echo ""
echo "üìà PHASE A SUCCESS CRITERIA"
echo "==========================="
echo "Target: b+c ‚â• 30 (sufficient differences)"
echo "Target: c > b (net improvement positive)"  
echo "Target: 100% user priors (STRICT compliance)"
echo "Target: gate_rate ‚âà 1.0 (healthy gating)"

# Extract key metrics for decision making
python - <<'PY'
import json, pathlib
try:
    effects = json.load(open("results/bench/strict_try_alpha6/effects.json"))
    b, c = effects.get("b", 0), effects.get("c", 0)
    bc = b + c
    net = c - b
    
    print(f"üìä RESULTS: b={b}, c={c}, b+c={bc}, c-b={net}")
    print(f"üìä Effect rate: {bc/effects.get('n',1)*100:.1f}%")
    print(f"üìä Net improvement: {net/effects.get('n',1)*100:.1f}%")
    
    # Decision criteria
    if bc >= 30 and net > 0:
        print("‚úÖ PHASE A SUCCESS: Proceed to Phase B parameter optimization")
    elif bc >= 15:
        print("‚ö†Ô∏è  MODERATE EFFECTS: Consider increasing Œ± or sample size")
    else:
        print("‚ùå INSUFFICIENT EFFECTS: Need parameter adjustment")
        
except Exception as e:
    print(f"‚ùå Analysis error: {e}")
PY

echo ""
echo "Next: Run Phase B mini grid search for optimal parameters"